<?xml version="1.0" encoding="utf-8"?><PE文件结构><nothing type="txt"> </nothing><PE文件头部><description type="txt"> </description><DOS头><description type="txt">为了保持与16位系统的兼容，PE里依旧保留了16位系统下的标准可执行程序执行时所必需的文件头(DOS MZ 头)和指令代码(DOS Stub)</description><IMAGE_DOS_HEADER><name type="txt">DOS MZ头</name><size type="txt">64</size><e_magic><description type="txt">EXE标志，“MZ”</description><size type="txt">word</size></e_magic><e_cblp><description type="txt">最后(部分)页中的字节数</description><size type="txt">word</size></e_cblp><e_cp><description type="txt">文件中的全部和部分页数</description><size type="txt">word</size></e_cp><e_crlc><description type="txt">重定位表中指针数</description><size type="txt">word</size></e_crlc><e_cparhdr><description type="txt">头部尺寸，以段落为单位</description><size type="txt">word</size></e_cparhdr><e_minalloc><description type="txt">所需最小附加段</description><size type="txt">word</size></e_minalloc><e_maxalloc><description type="txt">所需的最大附加段</description><size type="txt">word</size></e_maxalloc><e_ss><description type="txt">初始的SS值(相对偏移量)</description><size type="txt">word</size></e_ss><e_sp><description type="txt">初始的SP值</description><size type="txt">word</size></e_sp><e_csum><description type="txt">补码校验值</description><size type="txt">word</size></e_csum><e_ip><description type="txt">初始的IP值</description><size type="txt">word</size></e_ip><e_cs><description type="txt">初始的CS值</description><size type="txt">word</size></e_cs><e_lfarlc><description type="txt">重定位表的字节偏移量</description><size type="txt">word</size></e_lfarlc><e_ovno><description type="txt">覆盖号</description><size type="txt">word</size></e_ovno><e_res><description type="txt">保留字</description><size type="txt">word 4 dup</size></e_res><e_oemid><description type="txt">OEM标识符(相对e_oeminfo)</description><size type="txt">word</size></e_oemid><e_oeminfo><description type="txt">OEM信息</description><size type="txt">word</size></e_oeminfo><e_res2><description type="txt">保留字</description><size type="txt">word 10 dup</size></e_res2><e_lfanew><description type="txt">PE头相对于文件的偏移地址</description><size type="txt">dword</size></e_lfanew></IMAGE_DOS_HEADER><DOS_Stub><description type="txt">DOS Stub 部分是程序在DOS系统下的指令字节码</description><size type="txt">不确定</size></DOS_Stub></DOS头><PE头><description type="txt"> </description><IMAGE_NT_HEADERS><name type="txt">PE头</name><size type="txt">240</size><Signature><size type="txt">4</size><description type="txt">对应于ASCII码的字符串&quot;PE\0\0</description><name type="txt">PE头标识</name></Signature><IMAGE_FILE_HEADER><description type="txt">该结构在微软的官方文档中被称为标准通用对象文件格式（Common Object File Format，COFF）头。它记录了PE文件的全局属性，如该PE文件运行的平台、PE文件类型、文件中存在的节总数等。</description><name type="txt">标准PE头</name><size type="txt">20</size><Machine><description type="txt">运行平台</description><size type="txt">word</size></Machine><NumberOfSections><description type="txt">PE中节的数量</description><size type="txt">word</size></NumberOfSections><TimeDateStamp><description type="txt">文件创建日期和时间</description><size type="txt">dword</size></TimeDateStamp><PointerToSymbolTable><description type="txt">指向符号表(用于调试)</description><size type="txt">dword</size></PointerToSymbolTable><NumberOfSymbols><description type="txt">符号表中的符号数量（用于调试）</description><size type="txt">dword</size></NumberOfSymbols><SizeOfOptionalHeader><description type="txt">扩展头的长度</description><size type="txt">word</size></SizeOfOptionalHeader><Characteristics><description type="txt">文件属性</description><size type="txt">word</size></Characteristics></IMAGE_FILE_HEADER><IMAGE_OPTIONAL_HEADER32><description type="txt">扩展PE头</description><size type="txt">216</size><Magic><description type="txt">魔术字 107h=ROM Image，10Bh=exe Image</description><size type="txt">word</size></Magic><MajorLinkerVersion><description type="txt">链接器版本号</description><size type="txt">byte</size></MajorLinkerVersion><MinorLinkerVersion><description type="txt">链接器版本号</description><size type="txt">byte</size></MinorLinkerVersion><SizeOfCode><description type="txt">所有含代码的节的总大小</description><size type="txt">dword</size></SizeOfCode><SizeOfInitializedData><description type="txt">所有含已初始化数据的节的总大小</description><size type="txt">dword</size></SizeOfInitializedData><SizeOfUninitializedData><description type="txt">所有含未初始化数据的节的总大小</description><size type="txt">dword</size></SizeOfUninitializedData><AddressOfEntryPoint><description type="txt">程序执行入口RVA</description><size type="txt">dword</size></AddressOfEntryPoint><BaseOfCode><description type="txt">代码的节的起始RVA</description><size type="txt">dword</size></BaseOfCode><BaseOfData><description type="txt">数据的节的起始RVA</description><size type="txt">dword</size></BaseOfData><ImageBase><description type="txt">程序的建议装载地址</description><size type="txt">dword</size></ImageBase><SectionAlignment><description type="txt">内存中节的对齐粒度</description><size type="txt">dword</size></SectionAlignment><FileAlignment><description type="txt">文件中的节的对齐粒度</description><size type="txt">dword</size></FileAlignment><MajorOperatingSystemVersion><description type="txt">操作系统的版本号</description><size type="txt">word</size></MajorOperatingSystemVersion><MinorOperationgSystemVersion><description type="txt"> 操作系统版本号</description><size type="txt">word</size></MinorOperationgSystemVersion><MajorImageVersion><description type="txt">该PE的版本号</description><size type="txt">word</size></MajorImageVersion><MinorImageVersion><description type="txt">该PE的版本号</description><size type="txt">word</size></MinorImageVersion><MajorSubsystemVersion><description type="txt">所需子系统的版本号</description><size type="txt">word</size></MajorSubsystemVersion><MinorSubsystemVersion><description type="txt">所需子系统的版本号</description><size type="txt">word</size></MinorSubsystemVersion><Win32VersionValue><description type="txt">未用</description><size type="txt">dword</size></Win32VersionValue><SizeOfImage><description type="txt">内存中的整个PE映像尺寸</description><size type="txt">dword</size></SizeOfImage><SizeOfHeaders><description type="txt">所有头+节表的大小</description><size type="txt">dword</size></SizeOfHeaders><CheckSum><description type="txt">校验和</description><size type="txt">dword</size></CheckSum><Subsystem><description type="txt">文件的子系统</description><size type="txt">word</size></Subsystem><DllCharacteristics><description type="txt">Dll文件特性</description><size type="txt">word</size></DllCharacteristics><SizeOfStackReserve><description type="txt">初始化时的栈大小</description><size type="txt">dword</size></SizeOfStackReserve><SizeOfStackCommit><description type="txt">初始化时实际提交的栈大小</description><size type="txt">dword</size></SizeOfStackCommit><SizeOfHeapReserve><description type="txt">初始化时保留的堆大小</description><size type="txt">dword</size></SizeOfHeapReserve><SizeOfHeapCommit><description type="txt">初始化时实际提交的堆大小</description><size type="txt">dword</size></SizeOfHeapCommit><LoaderFlags><description type="txt">与调试有关</description><size type="txt">dword</size></LoaderFlags><NumberOfRvaAndSizes><description type="txt">下面的数据目录结构的项目数量</description><size type="txt">dword</size></NumberOfRvaAndSizes><DataDirectory><description type="txt">数据目录中定义的数据类型一直都是16种。PE中使用了一种称作“数据目录项IMAGE_DATA_DIRECTORY”的数据结构来定义每种数据。 16种数据目录类型

分别为： 
0、导出表 
1、导入表 
2、资源表 
3、异常表 
4、属性证书数据 
5、基地址重定位表 
6、调试信息 
7、Architecture-specific data, 预留为0 
8、Global pointer register relative virtual address, 指向全局指针寄存器的值 
9、线程局部存储 
10、加载配置表 
11、绑定导入表 
12、导入函数地址表 
13、延迟导入表 
14、CLR运行时头部数据地址 
15、系统保留</description><name type="txt">数据目录</name><size type="txt">IMAGE_DATA_DIRECTORY 16 dup</size><IMAGE_DATA_DIRECTORY><size type="txt">8</size><VirtualAddress><description type="txt">数据的起始RVA</description><size type="txt">dword</size></VirtualAddress><isize><description type="txt">数据块的长度</description><size type="txt">dword</size></isize></IMAGE_DATA_DIRECTORY></DataDirectory></IMAGE_OPTIONAL_HEADER32></IMAGE_NT_HEADERS></PE头><节表><description type="txt"> </description><IMAGE_SECTION_HEADER><description type="txt">节表项中记录了PE中与某个特定的节有关的信息，如节的属性、节的大小、在文件和内存中的起始位置等</description><size type="txt">40</size><Name1><description type="txt">8个字节节名，不以\0结尾，超过部分直接截断</description><size type="txt">8</size></Name1><union_Misc><size type="txt">dd</size><PhysicalAddress><size type="txt">dword</size></PhysicalAddress><VirtualSize><size type="txt">dword</size></VirtualSize></union_Misc><VirtualAddress><description type="txt">节区的RVA地址</description><size type="txt">dd</size></VirtualAddress><SizeOfRawData><description type="txt">在文件中对齐后的尺寸</description><size type="txt">dd</size></SizeOfRawData><PointerToRawData><description type="txt">在文件中的偏移</description><size type="txt">dd</size></PointerToRawData><PointerToRelocations><description type="txt">在OBJ文件中使用</description><size type="txt">dd</size></PointerToRelocations><PointerToLinenumbers><description type="txt">行号表的位置（供调试用）</description><size type="txt">dd</size></PointerToLinenumbers><NumberOfRelocations><description type="txt">在OBJ文件中使用</description><size type="txt">dword</size></NumberOfRelocations><NumberOfLinenumbers><description type="txt">行号表中的行号数量</description><size type="txt">dword</size></NumberOfLinenumbers><Characteristics><description type="txt">节的属性</description><详细内容 type="txt">http://msdn.microsoft.com/en-us/library/ms680341(v=vs.85).aspx</详细内容><size type="txt">dd</size></Characteristics></IMAGE_SECTION_HEADER></节表></PE文件头部><PE文件身体><description type="txt">以下数据结构列出为无序</description><ImportTable><size type="txt">20</size><description type="txt">导入表通常在常量节里，但这并不定理，我们可以把它放到代码节里，或其他的任何可读属性的节里。</description><name type="txt">导入表</name><IMAGE_IMPORT_DESCRIPTOR><description type="txt">导入表描述全零代表导入表描述结束。每个此结构都对应一个唯一的动态链接库，以及引用了该动态库的多个函数。</description><name type="txt">导入表描述符</name><size type="txt">20</size><union><description type="txt">一个联合体</description><Characteristics><size type="txt">dd</size></Characteristics><OriginalFirstThunk><point type="txt">IMAGE_THUNK_DATA</point><description type="txt">桥1，指向INT。实际为连续的IMAGE_THUNK_DATA，直到遇到双字为0结束。
</description><size type="txt">dd</size></OriginalFirstThunk></union><TimeDateStamp><description type="txt">时间戳</description><size type="txt">dd</size></TimeDateStamp><ForwarderChain><description type="txt">链表的前一个结构</description><size type="txt">dd</size></ForwarderChain><Name1><description type="txt">指向链接库名字的指针，名字以&quot;\0&quot;结尾</description><size type="txt">dd</size></Name1><FirstThunk><description type="txt">桥2，指向IAT</description><size type="txt">dd</size></FirstThunk></IMAGE_IMPORT_DESCRIPTOR></ImportTable><ImportAddressTable><name type="txt">导入函数地址表</name><description type="txt">导入函数地址表是一个双字的数组，每个双字代表的是一个导入函数的VA（导入函数地址，Import Address， IA）。
导入函数地址表的组织如下：
 --------------------
|链接库1引入函数1地址
|--------------------
|链接库1引入函数2地址
|--------------------
|00000000
|--------------------
|链接库2引入函数1地址
|--------------------
|链接库2引入函数2地址
|--------------------
|...
|--------------------
|链接库2引入函数n地址
|--------------------
|00000000
|--------------------
|...</description></ImportAddressTable><BoundImportTable><name type="txt">绑定导入表</name><description type="txt">绑定导入表组织方式如下：
 --------------------------------------------------
|IMAGE_BOUND_IMPORT_DESCRIPTOR(2个REF)
|--------------------------------------------------
|IMAGE_BOUND_FORWARDER_REF
|--------------------------------------------------
|IMAGE_BOUND_FORWARDER_REF
|-------------------------------------------------
|IMAGE_BOUND_IMPORT_DESCRIPTOR(1个REF)
|-------------------------------------------------
|IMAGE_BOUND_FORWARDER_REF
|-------------------------------------------------
|......
|-------------------------------------------------</description><IMAGE_BOUND_IMPORT_DESCRIPTOR><description type="txt"> </description><TimeDateStamp><description type="txt">时间戳</description><size type="txt">dword</size></TimeDateStamp><OffsetModuleName><description type="txt">指向dll名称，该地址为一个以IMAGE_BOUND_IMPORT_DESCRIPTORZ作为基址的偏移，指向以&quot;\0&quot;结束的ASCII字符串。</description><size type="txt">word</size></OffsetModuleName><NumberOfModuleForwarderRefs><description type="txt">ModuleForwarderRef数目</description><size type="txt">word</size></NumberOfModuleForwarderRefs></IMAGE_BOUND_IMPORT_DESCRIPTOR><IMAGE_BOUND_FORWARDER_REF><description type="txt">动态库某些函数实现代码会被转移到别的动态库中。为了提供向前的兼容，这些动态库还保留了函数的定义。也就是说一个导入函数涉及对多个动态库链接库函数的调用，此数据接结构将引入函数所涉及的所有动态库都列举出来。</description><TimeDateStamp><description type="txt">时间戳</description><size type="txt">dword</size></TimeDateStamp><OffsetModuleName><description type="txt">指向dll名称</description><size type="txt">word</size></OffsetModuleName><Reserved><description type="txt">预留</description><size type="txt">word</size></Reserved></IMAGE_BOUND_FORWARDER_REF></BoundImportTable><ExportTable><name type="txt">导出表</name><IMAGE_EXPORT_DIRECTORY><description type="txt"> 导入表的IMAGE_IMPORT_DESCRIPTOR个数与调用的动态链接库个数相等，而导出表的IMAGE_EXPORT_DIRECTORY只有一个。</description><Characteristics><description type="txt">标志，未用</description><size type="txt">dword</size></Characteristics><TimeDateStamp><description type="txt">时间戳</description><size type="txt">dword</size></TimeDateStamp><MajorVersion><description type="txt">未用</description><size type="txt">word</size></MajorVersion><MinorVersion><description type="txt">未用</description><size type="txt">word</size></MinorVersion><nName><description type="txt">指向该导出表的所在文件的最初文件名，以&quot;\0&quot;结尾的字符串。</description><size type="txt">dword</size></nName><nBase><description type="txt">导出函数的起始序号</description><size type="txt">dword</size></nBase><NumberOfFunctions><description type="txt">所有导出函数个数</description><size type="txt">dword</size></NumberOfFunctions><NumberOfNames><description type="txt">以函数名导出的函数个数</description><size type="txt">dword</size></NumberOfNames><AddressOfFunctions><description type="txt">导出函数地址表RVA，即所有导出函数的入口地址。从入口地址开始为双字数组，数组个数由NumberOfFunctions决定。导出函数的每个地址按函数的编号顺序依次往后排开。</description><size type="txt">dword</size></AddressOfFunctions><AddressOfNames><description type="txt">函数名称地址表RVA</description><size type="txt">dword</size></AddressOfNames><AddressOfNameOrdinals><description type="txt">函数序号地址表，指出函数在AddressOfFunctions中的索引值。</description><size type="txt">dword</size></AddressOfNameOrdinals></IMAGE_EXPORT_DIRECTORY></ExportTable><BaseRelocationTable><name type="txt">重定位表</name><IMAGE_BASE_RELOCATION><description type="txt"> </description><VirtualAddress><description type="txt">重定位内存页的起始RVA</description><size type="txt">dd</size></VirtualAddress><SizeOfBlock><description type="txt">重定位块中重定位表项数量。</description><size type="txt">dd</size></SizeOfBlock></IMAGE_BASE_RELOCATION></BaseRelocationTable></PE文件身体><其它数据结构><description type="txt"> </description><IMAGE_THUNK_DATA><size type="txt">dd</size><union_u1><size type="txt">dd</size><ForwarderString><description type="txt">RVA to a forwarder string</description><size type="txt">dd</size></ForwarderString><Function><description type="txt">Memory address of the imported function</description><size type="txt">dd</size></Function><Ordinal><description type="txt">Ordinal value of imported API</description><size type="txt">dd</size></Ordinal><AddressOfData><point type="txt">IMAGE_IMPORT_BY_NAME</point><description type="txt">RVA to an IMAGE_IMPORT_BY_NAME with the imported API name</description><size type="txt">dd</size></AddressOfData></union_u1></IMAGE_THUNK_DATA><IMAGE_IMPORT_BY_NAME><description type="txt"> </description><Hint><description type="txt">函数的编号，在dll中对每个函数都进行了编号，访问函数时可以通过名称访问，也可以通过编号访问。</description><size type="txt">dw</size></Hint><Name1><description type="txt">函数名字</description><size type="txt">以&quot;\0&quot;结束的字符串。</size></Name1></IMAGE_IMPORT_BY_NAME></其它数据结构></PE文件结构>